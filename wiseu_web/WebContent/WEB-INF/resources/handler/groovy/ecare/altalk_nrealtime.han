import com.mnwise.ASE.agent.dbagent.QueryExecutor
import com.mnwise.ASE.agent.kakaoagent.TalkAgent
import com.mnwise.ASE.agent.kakaoagent.TalkData
import com.mnwise.ASE.agent.util.ExceptionLogger
import com.mnwise.ASE.agent.util.TextReader
import com.mnwise.ASE.agent.util.ValueMapper
import com.mnwise.ASE.pscript.Message
import com.mnwise.common.jeonmun.JsonJeonmun
import com.mnwise.common.util.LoggerAid
import com.mnwise.common.util.StringUtil

ExceptionLogger exLogger = null
TextReader target = null
QueryExecutor queryExecutor = null

try {
    exLogger = new ExceptionLogger(context)

    target = new TextReader(context)

    Message message = new Message(context)
    message.prepareGroovyTemplateWithCustomVariable("#{", "}", "<%=(jRecord.getString(\"", "\"))%>")
    message.prepareGroovyTemplateWithCustomVariable("#{", "}", "<%=(jRecord.getString(\"", "\"))%>", false, "KAKAO_BUTTONS", context.get("_KAKAO_BUTTONS"))
    message.prepareGroovyTemplateWithCustomVariable("#{", "}", "<%=(jRecord.getString(\"", "\"))%>", false, "KAKAO_QUICK_REPLIES", context.get("_KAKAO_QUICK_REPLIES"))

    ValueMapper mapper = new ValueMapper(context, target)

    queryExecutor = new QueryExecutor(context, target, message)
    queryExecutor.init()
    queryExecutor.executeDataQueryByOnce()

    TalkAgent talkAgent = new TalkAgent(context)

    while (target.next()) {
        try {
            queryExecutor.executeDataQueryByTarget()

            TalkData data = new TalkData()
            data.setListSeq(context.get("_LIST_SEQ"))
            data.setPhoneNo(getPhoneNo(target))
            data.setReqDeptId(target.getString("REQ_DEPT_ID"))
            data.setReqDtm(target.getString("RESERVED_DATE"))
            data.setReqUserId(target.getString("REQ_USER_ID"))
            data.setResultSeq(Long.parseLong(context.get("_RESULT_SEQ")))
            data.setSenderKey(context.get("_KAKAO_SENDER_KEY"))
            data.setSeq(target.getString("SEQ"))
            data.setServiceNo(Integer.parseInt(context.get("_CAMPAIGN_NO")))
            data.setServiceType(context.get("_CLIENT"))
            data.setSmsSndNum(target.getString("SENDER"))
            data.setSmsSndYn(context.get("_FAILBACK_SEND_YN"))
            data.setSubject(context.get("_FAILBACK_SUBJECT"))
            data.setTmplCd(context.get("_KAKAO_TMPL_CD"))
            data.setUserId(target.getString("RECEIVER_ID"))
            data.setMessageType("IMAGE".equals(context.get("_KAKAO_EM_TYPE")) ? "AI" : "AT")
            data.setEmTitle(context.get("_KAKAO_EM_TITLE"))
            data.setQuickReplies(message.execGroovyTemplate("KAKAO_QUICK_REPLIES"))

            String msg
            if ("J".equals(target.getString("TMPL_TYPE"))) {
                message.setBindingProperty("record", target.getRecord())
                message.setBindingProperty("jRecord", new JsonJeonmun(context.get("data1").get("JONMUN")))
                data.setKakaoButton(message.execGroovyTemplate("KAKAO_BUTTONS"))
                msg = message.execGroovyTemplate()
            } else {
                msg = context.get("data1").get("JONMUN")
            }

            data.setSndMsg(msg)

            // SLOT1 ~ 10 필드 개인화
            Map additionalDataMap = new HashMap()
            for (int i = 1; i <= 10; i++) {
                additionalDataMap.put("SLOT" + i, mapper.apply(context.get("_SLOT" + i + "_FIELD")))
            }

            data.setAdditionalDataMap(additionalDataMap)

            talkAgent.send(data)

            context.put("_SEND_FG", "E")
            context.put("_ERROR_MESSAGE", "")
        } catch (Exception e) {
            context.put("_SEND_FG", "O")
            context.put("_ERROR_MESSAGE", StringUtil.defaultIfBlank(e.getMessage(), "Error Message is null"))
            context.put("_EXCEPTION", e)
            exLogger.write(target.toString(), e)

            if (!"Y".equals(context.get("_PREVIEW_YN"))) {
                String errMsg = LoggerAid.onlyOneLine(e).substring(0, 125)
                exLogger.insertSendLog(target, target.getString("RECEIVER"), target.getString("RECEIVER_ID"), target.getString("RECEIVER_NM"), errMsg, target.getString("SEQ"), target.getString("REQ_DEPT_ID"))
            }
        } finally {
            queryExecutor.executeResultQueryByTarget()
        }
    }

    queryExecutor.executeResultQueryByOnce()
} finally {
    if (exLogger != null) {
        exLogger.close()
    }
    if (target != null) {
        target.close()
    }
    if (queryExecutor != null) {
        queryExecutor.close()
    }
}

/*
 * 시뮬레이션 모드("SIMUL")면 발송되지 않는 연락처로 변경
 */
private String getPhoneNo(TextReader target) {
    if ("SIMUL".equals(context.get("_DEPLOY_TYPE"))) {
        return "SIMULATION"
    } else {
        return target.getString("RECEIVER")
    }
}
